# -*- coding: utf-8 -*-
"""logistic_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IhFmSEr_nKAImlB-xyDItoZU5UTgsnSf
"""

import pandas as pd

df = pd.read_csv('/content/flipkart_product_processed.csv')

df.head()

df.loc[df['Summary'].isna(), 'Summary'] = ''

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(df['Summary'], df['Rate'], test_size=0.2, random_state=7)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""Vectorize the Text Data:

You can use either CountVectorizer or TfidfVectorizer to convert the text data into numerical features. Here, I'll use TfidfVectorizer.
"""

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
x_train_bow = vectorizer.fit_transform(x_train)
x_test_bow = vectorizer.transform(x_test)

"""Train a Logistic Regression Model:"""

logreg_model = LogisticRegression(
    solver='saga',          # Suitable for large datasets
    penalty='l2',           # Regularization type
    C=1.0,                  # Regularization strength (can be tuned)
    max_iter=1000,          # Increase if convergence issues
    # class_weight='balanced' # Handle class imbalance (optional)
)

"""Make Predictions:"""

# Train the model using the transformed data
logreg_model.fit(x_train_bow, y_train)  # Use x_train_bow instead of x_train

# Make predictions
logreg_y_pred = logreg_model.predict(x_test_bow)  # Use x_test_bow instead of x_test

"""Evaluate the Model:"""

# Evaluate the model
accuracy = accuracy_score(y_test, logreg_y_pred)
report = classification_report(y_test, logreg_y_pred)
conf_matrix = confusion_matrix(y_test, logreg_y_pred)

print(f'Logistic Regression Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')
print(f'Confusion Matrix:\n{conf_matrix}')

"""Visualize the Confusion Matrix:"""

import seaborn as sns
import matplotlib.pyplot as plt

# Plot confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - Logistic Regression')
plt.show()

# Calculate the ROC curve and AUC score
from sklearn.metrics import roc_curve, auc
fpr, tpr, thresholds = roc_curve(y_test, logreg_y_pred)
roc_auc = auc(fpr, tpr)

# Plot the ROC curve
plt.figure()
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()

logreg_model = LogisticRegression(multi_class='multinomial', class_weight="balanced", random_state=7, solver='saga')

logreg_model = LogisticRegression(multi_class='multinomial', class_weight="balanced", random_state=7, solver='saga', max_iter=200)

logreg_model = LogisticRegression(multi_class='multinomial', class_weight="balanced", random_state=7, solver='lbfgs', max_iter=200)

"""The warning means the model didn't finish optimizing within the set number of steps (max_iter). To fix it, try increasing max_iter to give the model more time to find the best solution. You can also check if your data needs scaling or consider using a different solver.







"""

# Train the model using the transformed data
logreg_model.fit(x_train_bow, y_train)  # Use x_train_bow instead of x_train

# Make predictions
logreg_y_pred = logreg_model.predict(x_test_bow)  # Use x_test_bow instead of x_test

# Evaluate the model
accuracy = accuracy_score(y_test, logreg_y_pred)
report = classification_report(y_test, logreg_y_pred)
conf_matrix = confusion_matrix(y_test, logreg_y_pred)

print(f'Logistic Regression Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')
print(f'Confusion Matrix:\n{conf_matrix}')

